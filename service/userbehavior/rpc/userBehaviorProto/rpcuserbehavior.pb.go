// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: rpcuserbehavior.proto

//import public "google/protobuf/timestamp.proto";

package userBehaviorProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckHealthRequest) Reset() {
	*x = CheckHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHealthRequest) ProtoMessage() {}

func (x *CheckHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHealthRequest.ProtoReflect.Descriptor instead.
func (*CheckHealthRequest) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{0}
}

type CheckHealthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckHealthReply) Reset() {
	*x = CheckHealthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckHealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckHealthReply) ProtoMessage() {}

func (x *CheckHealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckHealthReply.ProtoReflect.Descriptor instead.
func (*CheckHealthReply) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{1}
}

func (x *CheckHealthReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//获取粉丝关注数量参数
type GetUserCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TargetUin string `protobuf:"bytes,2,opt,name=targetUin,proto3" json:"targetUin,omitempty"`
}

func (x *GetUserCountReq) Reset() {
	*x = GetUserCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCountReq) ProtoMessage() {}

func (x *GetUserCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCountReq.ProtoReflect.Descriptor instead.
func (*GetUserCountReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserCountReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetUserCountReq) GetTargetUin() string {
	if x != nil {
		return x.TargetUin
	}
	return ""
}

type GetUserCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowNum int64 `protobuf:"varint,1,opt,name=followNum,proto3" json:"followNum,omitempty"`
	FocusNum  int64 `protobuf:"varint,2,opt,name=focusNum,proto3" json:"focusNum,omitempty"`
}

func (x *GetUserCountResp) Reset() {
	*x = GetUserCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCountResp) ProtoMessage() {}

func (x *GetUserCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCountResp.ProtoReflect.Descriptor instead.
func (*GetUserCountResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserCountResp) GetFollowNum() int64 {
	if x != nil {
		return x.FollowNum
	}
	return 0
}

func (x *GetUserCountResp) GetFocusNum() int64 {
	if x != nil {
		return x.FocusNum
	}
	return 0
}

//获取评论数量参数
type GetProduceCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int64  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *GetProduceCountReq) Reset() {
	*x = GetProduceCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProduceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProduceCountReq) ProtoMessage() {}

func (x *GetProduceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProduceCountReq.ProtoReflect.Descriptor instead.
func (*GetProduceCountReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{4}
}

func (x *GetProduceCountReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetProduceCountReq) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *GetProduceCountReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type GetProduceCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentNum int64 `protobuf:"varint,1,opt,name=commentNum,proto3" json:"commentNum,omitempty"`
	PraiseNum  int64 `protobuf:"varint,2,opt,name=praiseNum,proto3" json:"praiseNum,omitempty"`
	ShareNum   int64 `protobuf:"varint,3,opt,name=shareNum,proto3" json:"shareNum,omitempty"`
}

func (x *GetProduceCountResp) Reset() {
	*x = GetProduceCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProduceCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProduceCountResp) ProtoMessage() {}

func (x *GetProduceCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProduceCountResp.ProtoReflect.Descriptor instead.
func (*GetProduceCountResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{5}
}

func (x *GetProduceCountResp) GetCommentNum() int64 {
	if x != nil {
		return x.CommentNum
	}
	return 0
}

func (x *GetProduceCountResp) GetPraiseNum() int64 {
	if x != nil {
		return x.PraiseNum
	}
	return 0
}

func (x *GetProduceCountResp) GetShareNum() int64 {
	if x != nil {
		return x.ShareNum
	}
	return 0
}

//获取关注/粉丝列表
type GetFocusFollowListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	PageIndex int64  `protobuf:"varint,2,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize  int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Type      int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	TargetUin string `protobuf:"bytes,5,opt,name=targetUin,proto3" json:"targetUin,omitempty"` //目标UIN，获取此UIN的列表
}

func (x *GetFocusFollowListReq) Reset() {
	*x = GetFocusFollowListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFocusFollowListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFocusFollowListReq) ProtoMessage() {}

func (x *GetFocusFollowListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFocusFollowListReq.ProtoReflect.Descriptor instead.
func (*GetFocusFollowListReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{6}
}

func (x *GetFocusFollowListReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetFocusFollowListReq) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetFocusFollowListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFocusFollowListReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetFocusFollowListReq) GetTargetUin() string {
	if x != nil {
		return x.TargetUin
	}
	return ""
}

type GetFocusFollowListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UIn         string `protobuf:"bytes,2,opt,name=uIn,proto3" json:"uIn,omitempty"`
	UserName    string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	UserHeadUrl string `protobuf:"bytes,4,opt,name=userHeadUrl,proto3" json:"userHeadUrl,omitempty"`
	Status      int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetFocusFollowListData) Reset() {
	*x = GetFocusFollowListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFocusFollowListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFocusFollowListData) ProtoMessage() {}

func (x *GetFocusFollowListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFocusFollowListData.ProtoReflect.Descriptor instead.
func (*GetFocusFollowListData) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{7}
}

func (x *GetFocusFollowListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetFocusFollowListData) GetUIn() string {
	if x != nil {
		return x.UIn
	}
	return ""
}

func (x *GetFocusFollowListData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetFocusFollowListData) GetUserHeadUrl() string {
	if x != nil {
		return x.UserHeadUrl
	}
	return ""
}

func (x *GetFocusFollowListData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetFocusFollowListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*GetFocusFollowListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetFocusFollowListResp) Reset() {
	*x = GetFocusFollowListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFocusFollowListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFocusFollowListResp) ProtoMessage() {}

func (x *GetFocusFollowListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFocusFollowListResp.ProtoReflect.Descriptor instead.
func (*GetFocusFollowListResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{8}
}

func (x *GetFocusFollowListResp) GetList() []*GetFocusFollowListData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFocusFollowListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

//获取用户是否点赞
type GetUserIsPraiseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int64  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *GetUserIsPraiseReq) Reset() {
	*x = GetUserIsPraiseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIsPraiseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIsPraiseReq) ProtoMessage() {}

func (x *GetUserIsPraiseReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIsPraiseReq.ProtoReflect.Descriptor instead.
func (*GetUserIsPraiseReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserIsPraiseReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetUserIsPraiseReq) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *GetUserIsPraiseReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type GetUserIsPraiseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPraise bool `protobuf:"varint,1,opt,name=isPraise,proto3" json:"isPraise,omitempty"`
}

func (x *GetUserIsPraiseResp) Reset() {
	*x = GetUserIsPraiseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIsPraiseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIsPraiseResp) ProtoMessage() {}

func (x *GetUserIsPraiseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIsPraiseResp.ProtoReflect.Descriptor instead.
func (*GetUserIsPraiseResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserIsPraiseResp) GetIsPraise() bool {
	if x != nil {
		return x.IsPraise
	}
	return false
}

//获取点赞列表
type GetPraiseListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	PageIndex int64  `protobuf:"varint,2,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize  int64  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TargetUin string `protobuf:"bytes,4,opt,name=targetUin,proto3" json:"targetUin,omitempty"` //目标UIN，获取此UIN的列表
}

func (x *GetPraiseListReq) Reset() {
	*x = GetPraiseListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPraiseListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPraiseListReq) ProtoMessage() {}

func (x *GetPraiseListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPraiseListReq.ProtoReflect.Descriptor instead.
func (*GetPraiseListReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{11}
}

func (x *GetPraiseListReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetPraiseListReq) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *GetPraiseListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPraiseListReq) GetTargetUin() string {
	if x != nil {
		return x.TargetUin
	}
	return ""
}

type GetPraiseListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicType int64  `protobuf:"varint,1,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,2,opt,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *GetPraiseListData) Reset() {
	*x = GetPraiseListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPraiseListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPraiseListData) ProtoMessage() {}

func (x *GetPraiseListData) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPraiseListData.ProtoReflect.Descriptor instead.
func (*GetPraiseListData) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{12}
}

func (x *GetPraiseListData) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *GetPraiseListData) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type GetPraiseListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*GetPraiseListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetPraiseListResp) Reset() {
	*x = GetPraiseListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPraiseListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPraiseListResp) ProtoMessage() {}

func (x *GetPraiseListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPraiseListResp.ProtoReflect.Descriptor instead.
func (*GetPraiseListResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{13}
}

func (x *GetPraiseListResp) GetList() []*GetPraiseListData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetPraiseListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

//获取用户关注状态参数
type GetUserFocusStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	FocusUin string `protobuf:"bytes,2,opt,name=focusUin,proto3" json:"focusUin,omitempty"`
}

func (x *GetUserFocusStatusReq) Reset() {
	*x = GetUserFocusStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFocusStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFocusStatusReq) ProtoMessage() {}

func (x *GetUserFocusStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFocusStatusReq.ProtoReflect.Descriptor instead.
func (*GetUserFocusStatusReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{14}
}

func (x *GetUserFocusStatusReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetUserFocusStatusReq) GetFocusUin() string {
	if x != nil {
		return x.FocusUin
	}
	return ""
}

type GetUserFocusStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //2-用户互相关注 3-双方都没关注 4-仅我关注了ta 5-仅ta关注了我
}

func (x *GetUserFocusStatusResp) Reset() {
	*x = GetUserFocusStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFocusStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFocusStatusResp) ProtoMessage() {}

func (x *GetUserFocusStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFocusStatusResp.ProtoReflect.Descriptor instead.
func (*GetUserFocusStatusResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{15}
}

func (x *GetUserFocusStatusResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//批量获取评论数量参数
type GetProduceCountsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64    `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int64    `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   []string `protobuf:"bytes,3,rep,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *GetProduceCountsReq) Reset() {
	*x = GetProduceCountsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProduceCountsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProduceCountsReq) ProtoMessage() {}

func (x *GetProduceCountsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProduceCountsReq.ProtoReflect.Descriptor instead.
func (*GetProduceCountsReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{16}
}

func (x *GetProduceCountsReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetProduceCountsReq) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *GetProduceCountsReq) GetTopicId() []string {
	if x != nil {
		return x.TopicId
	}
	return nil
}

type GetProduceCountsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentNum int64  `protobuf:"varint,1,opt,name=commentNum,proto3" json:"commentNum,omitempty"`
	PraiseNum  int64  `protobuf:"varint,2,opt,name=praiseNum,proto3" json:"praiseNum,omitempty"`
	ShareNum   int64  `protobuf:"varint,3,opt,name=shareNum,proto3" json:"shareNum,omitempty"`
	TopicType  int64  `protobuf:"varint,4,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId    string `protobuf:"bytes,5,opt,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *GetProduceCountsData) Reset() {
	*x = GetProduceCountsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProduceCountsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProduceCountsData) ProtoMessage() {}

func (x *GetProduceCountsData) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProduceCountsData.ProtoReflect.Descriptor instead.
func (*GetProduceCountsData) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{17}
}

func (x *GetProduceCountsData) GetCommentNum() int64 {
	if x != nil {
		return x.CommentNum
	}
	return 0
}

func (x *GetProduceCountsData) GetPraiseNum() int64 {
	if x != nil {
		return x.PraiseNum
	}
	return 0
}

func (x *GetProduceCountsData) GetShareNum() int64 {
	if x != nil {
		return x.ShareNum
	}
	return 0
}

func (x *GetProduceCountsData) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *GetProduceCountsData) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type GetProduceCountsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetProduceCountsData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetProduceCountsResp) Reset() {
	*x = GetProduceCountsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProduceCountsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProduceCountsResp) ProtoMessage() {}

func (x *GetProduceCountsResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProduceCountsResp.ProtoReflect.Descriptor instead.
func (*GetProduceCountsResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{18}
}

func (x *GetProduceCountsResp) GetList() []*GetProduceCountsData {
	if x != nil {
		return x.List
	}
	return nil
}

//新增关注详情参数
type AddFocusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	FocusUin string `protobuf:"bytes,2,opt,name=focusUin,proto3" json:"focusUin,omitempty"`
}

func (x *AddFocusReq) Reset() {
	*x = AddFocusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFocusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFocusReq) ProtoMessage() {}

func (x *AddFocusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFocusReq.ProtoReflect.Descriptor instead.
func (*AddFocusReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{19}
}

func (x *AddFocusReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddFocusReq) GetFocusUin() string {
	if x != nil {
		return x.FocusUin
	}
	return ""
}

type AddFocusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFocusResp) Reset() {
	*x = AddFocusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFocusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFocusResp) ProtoMessage() {}

func (x *AddFocusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFocusResp.ProtoReflect.Descriptor instead.
func (*AddFocusResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{20}
}

//新增点赞详情参数
type AddPraiseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int32  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *AddPraiseReq) Reset() {
	*x = AddPraiseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPraiseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPraiseReq) ProtoMessage() {}

func (x *AddPraiseReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPraiseReq.ProtoReflect.Descriptor instead.
func (*AddPraiseReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{21}
}

func (x *AddPraiseReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddPraiseReq) GetTopicType() int32 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *AddPraiseReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type AddPraiseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPraiseResp) Reset() {
	*x = AddPraiseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPraiseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPraiseResp) ProtoMessage() {}

func (x *AddPraiseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPraiseResp.ProtoReflect.Descriptor instead.
func (*AddPraiseResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{22}
}

//新增关注计数参数
type AddFocusNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	FocusUin string `protobuf:"bytes,2,opt,name=focusUin,proto3" json:"focusUin,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` //1-接口新增操作类型 2-接口减少操作类型
}

func (x *AddFocusNumReq) Reset() {
	*x = AddFocusNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFocusNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFocusNumReq) ProtoMessage() {}

func (x *AddFocusNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFocusNumReq.ProtoReflect.Descriptor instead.
func (*AddFocusNumReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{23}
}

func (x *AddFocusNumReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddFocusNumReq) GetFocusUin() string {
	if x != nil {
		return x.FocusUin
	}
	return ""
}

func (x *AddFocusNumReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddFocusNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFocusNumResp) Reset() {
	*x = AddFocusNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFocusNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFocusNumResp) ProtoMessage() {}

func (x *AddFocusNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFocusNumResp.ProtoReflect.Descriptor instead.
func (*AddFocusNumResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{24}
}

//新增评论计数参数
type AddCommentNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int32  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
	Type      int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` //1-接口新增操作类型 2-接口减少操作类型
}

func (x *AddCommentNumReq) Reset() {
	*x = AddCommentNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentNumReq) ProtoMessage() {}

func (x *AddCommentNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentNumReq.ProtoReflect.Descriptor instead.
func (*AddCommentNumReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{25}
}

func (x *AddCommentNumReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddCommentNumReq) GetTopicType() int32 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *AddCommentNumReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *AddCommentNumReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddCommentNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddCommentNumResp) Reset() {
	*x = AddCommentNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentNumResp) ProtoMessage() {}

func (x *AddCommentNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentNumResp.ProtoReflect.Descriptor instead.
func (*AddCommentNumResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{26}
}

//新增点赞计数参数
type AddPraiseNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int32  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
	Type      int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` //1-接口新增操作类型 2-接口减少操作类型
}

func (x *AddPraiseNumReq) Reset() {
	*x = AddPraiseNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPraiseNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPraiseNumReq) ProtoMessage() {}

func (x *AddPraiseNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPraiseNumReq.ProtoReflect.Descriptor instead.
func (*AddPraiseNumReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{27}
}

func (x *AddPraiseNumReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddPraiseNumReq) GetTopicType() int32 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *AddPraiseNumReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *AddPraiseNumReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddPraiseNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPraiseNumResp) Reset() {
	*x = AddPraiseNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPraiseNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPraiseNumResp) ProtoMessage() {}

func (x *AddPraiseNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPraiseNumResp.ProtoReflect.Descriptor instead.
func (*AddPraiseNumResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{28}
}

//新增粉丝计数参数
type AddFollowNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	FocusUin string `protobuf:"bytes,2,opt,name=focusUin,proto3" json:"focusUin,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` //1-接口新增操作类型 2-接口减少操作类型
}

func (x *AddFollowNumReq) Reset() {
	*x = AddFollowNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFollowNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFollowNumReq) ProtoMessage() {}

func (x *AddFollowNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFollowNumReq.ProtoReflect.Descriptor instead.
func (*AddFollowNumReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{29}
}

func (x *AddFollowNumReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddFollowNumReq) GetFocusUin() string {
	if x != nil {
		return x.FocusUin
	}
	return ""
}

func (x *AddFollowNumReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddFollowNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFollowNumResp) Reset() {
	*x = AddFollowNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFollowNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFollowNumResp) ProtoMessage() {}

func (x *AddFollowNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFollowNumResp.ProtoReflect.Descriptor instead.
func (*AddFollowNumResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{30}
}

//新增分享计数参数
type AddShareNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int32  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //1-接口新增操作类型 2-接口减少操作类型
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
	Type      int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` //1-接口新增操作类型 2-接口减少操作类型
}

func (x *AddShareNumReq) Reset() {
	*x = AddShareNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShareNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShareNumReq) ProtoMessage() {}

func (x *AddShareNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShareNumReq.ProtoReflect.Descriptor instead.
func (*AddShareNumReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{31}
}

func (x *AddShareNumReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddShareNumReq) GetTopicType() int32 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *AddShareNumReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *AddShareNumReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type AddShareNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddShareNumResp) Reset() {
	*x = AddShareNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShareNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShareNumResp) ProtoMessage() {}

func (x *AddShareNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShareNumResp.ProtoReflect.Descriptor instead.
func (*AddShareNumResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{32}
}

//取消关注详情参数
type DelFocusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	FocusUin string `protobuf:"bytes,2,opt,name=focusUin,proto3" json:"focusUin,omitempty"`
}

func (x *DelFocusReq) Reset() {
	*x = DelFocusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFocusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFocusReq) ProtoMessage() {}

func (x *DelFocusReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFocusReq.ProtoReflect.Descriptor instead.
func (*DelFocusReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{33}
}

func (x *DelFocusReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *DelFocusReq) GetFocusUin() string {
	if x != nil {
		return x.FocusUin
	}
	return ""
}

type DelFocusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelFocusResp) Reset() {
	*x = DelFocusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFocusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFocusResp) ProtoMessage() {}

func (x *DelFocusResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFocusResp.ProtoReflect.Descriptor instead.
func (*DelFocusResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{34}
}

//取消点赞详情参数
type DelPraiseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicType int32  `protobuf:"varint,2,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	TopicId   string `protobuf:"bytes,3,opt,name=topicId,proto3" json:"topicId,omitempty"`
}

func (x *DelPraiseReq) Reset() {
	*x = DelPraiseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPraiseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPraiseReq) ProtoMessage() {}

func (x *DelPraiseReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPraiseReq.ProtoReflect.Descriptor instead.
func (*DelPraiseReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{35}
}

func (x *DelPraiseReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *DelPraiseReq) GetTopicType() int32 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *DelPraiseReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type DelPraiseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelPraiseResp) Reset() {
	*x = DelPraiseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPraiseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPraiseResp) ProtoMessage() {}

func (x *DelPraiseResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPraiseResp.ProtoReflect.Descriptor instead.
func (*DelPraiseResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{36}
}

// 添加评论
type AddCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicId   string `protobuf:"bytes,2,opt,name=topicId,proto3" json:"topicId,omitempty"`
	TopicType int64  `protobuf:"varint,3,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *AddCommentReq) Reset() {
	*x = AddCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentReq) ProtoMessage() {}

func (x *AddCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentReq.ProtoReflect.Descriptor instead.
func (*AddCommentReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{37}
}

func (x *AddCommentReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AddCommentReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *AddCommentReq) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *AddCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AddCommentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddCommentResp) Reset() {
	*x = AddCommentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCommentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommentResp) ProtoMessage() {}

func (x *AddCommentResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommentResp.ProtoReflect.Descriptor instead.
func (*AddCommentResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{38}
}

// 获取评论
type GetCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int64  `protobuf:"varint,1,opt,name=appId,proto3" json:"appId,omitempty"`
	TopicId   string `protobuf:"bytes,2,opt,name=topicId,proto3" json:"topicId,omitempty"`
	TopicType int64  `protobuf:"varint,3,opt,name=topicType,proto3" json:"topicType,omitempty"` //主题类型 1-作品 2-专题 3-评论
	PageSize  int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Page      int32  `protobuf:"varint,5,opt,name=Page,proto3" json:"Page,omitempty"`
	Sort      int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *GetCommentListReq) Reset() {
	*x = GetCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListReq) ProtoMessage() {}

func (x *GetCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListReq.ProtoReflect.Descriptor instead.
func (*GetCommentListReq) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{39}
}

func (x *GetCommentListReq) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GetCommentListReq) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *GetCommentListReq) GetTopicType() int64 {
	if x != nil {
		return x.TopicType
	}
	return 0
}

func (x *GetCommentListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCommentListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCommentListReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type CommentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uin         string `protobuf:"bytes,2,opt,name=uin,proto3" json:"uin,omitempty"`
	UserAvatar  string `protobuf:"bytes,3,opt,name=userAvatar,proto3" json:"userAvatar,omitempty"`
	NickName    string `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Content     string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	CreatedAt   string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PraiseCount int64  `protobuf:"varint,7,opt,name=praiseCount,proto3" json:"praiseCount,omitempty"`
	IsAuthor    bool   `protobuf:"varint,8,opt,name=isAuthor,proto3" json:"isAuthor,omitempty"`
	IsPraise    bool   `protobuf:"varint,9,opt,name=isPraise,proto3" json:"isPraise,omitempty"`
}

func (x *CommentList) Reset() {
	*x = CommentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentList) ProtoMessage() {}

func (x *CommentList) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentList.ProtoReflect.Descriptor instead.
func (*CommentList) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{40}
}

func (x *CommentList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentList) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *CommentList) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *CommentList) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CommentList) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentList) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CommentList) GetPraiseCount() int64 {
	if x != nil {
		return x.PraiseCount
	}
	return 0
}

func (x *CommentList) GetIsAuthor() bool {
	if x != nil {
		return x.IsAuthor
	}
	return false
}

func (x *CommentList) GetIsPraise() bool {
	if x != nil {
		return x.IsPraise
	}
	return false
}

type GetCommentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*CommentList `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetCommentListResp) Reset() {
	*x = GetCommentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcuserbehavior_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListResp) ProtoMessage() {}

func (x *GetCommentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpcuserbehavior_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListResp.ProtoReflect.Descriptor instead.
func (*GetCommentListResp) Descriptor() ([]byte, []int) {
	return file_rpcuserbehavior_proto_rawDescGZIP(), []int{41}
}

func (x *GetCommentListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCommentListResp) GetList() []*CommentList {
	if x != nil {
		return x.List
	}
	return nil
}

var File_rpcuserbehavior_proto protoreflect.FileDescriptor

var file_rpcuserbehavior_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x70, 0x63, 0x75, 0x73, 0x65, 0x72, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x6e,
	0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x62,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x61, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x22,
	0x90, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x49,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x55, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x55, 0x69, 0x6e, 0x22, 0x30,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x3f, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x55, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x55, 0x69,
	0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x5c, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x22,
	0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x56, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x74, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x73, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x57, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x72, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x3f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x55, 0x69, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x5c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x77, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x10, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa5,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x32, 0x8a, 0x0c, 0x0a, 0x0f, 0x52, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x50, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x50, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x50, 0x72,
	0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x63, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x50, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4d, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d,
	0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4a, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x61, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x47, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x13,
	0x5a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpcuserbehavior_proto_rawDescOnce sync.Once
	file_rpcuserbehavior_proto_rawDescData = file_rpcuserbehavior_proto_rawDesc
)

func file_rpcuserbehavior_proto_rawDescGZIP() []byte {
	file_rpcuserbehavior_proto_rawDescOnce.Do(func() {
		file_rpcuserbehavior_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpcuserbehavior_proto_rawDescData)
	})
	return file_rpcuserbehavior_proto_rawDescData
}

var file_rpcuserbehavior_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_rpcuserbehavior_proto_goTypes = []interface{}{
	(*CheckHealthRequest)(nil),     // 0: userBehavior.CheckHealthRequest
	(*CheckHealthReply)(nil),       // 1: userBehavior.CheckHealthReply
	(*GetUserCountReq)(nil),        // 2: userBehavior.GetUserCountReq
	(*GetUserCountResp)(nil),       // 3: userBehavior.GetUserCountResp
	(*GetProduceCountReq)(nil),     // 4: userBehavior.GetProduceCountReq
	(*GetProduceCountResp)(nil),    // 5: userBehavior.GetProduceCountResp
	(*GetFocusFollowListReq)(nil),  // 6: userBehavior.GetFocusFollowListReq
	(*GetFocusFollowListData)(nil), // 7: userBehavior.GetFocusFollowListData
	(*GetFocusFollowListResp)(nil), // 8: userBehavior.GetFocusFollowListResp
	(*GetUserIsPraiseReq)(nil),     // 9: userBehavior.GetUserIsPraiseReq
	(*GetUserIsPraiseResp)(nil),    // 10: userBehavior.GetUserIsPraiseResp
	(*GetPraiseListReq)(nil),       // 11: userBehavior.GetPraiseListReq
	(*GetPraiseListData)(nil),      // 12: userBehavior.GetPraiseListData
	(*GetPraiseListResp)(nil),      // 13: userBehavior.GetPraiseListResp
	(*GetUserFocusStatusReq)(nil),  // 14: userBehavior.GetUserFocusStatusReq
	(*GetUserFocusStatusResp)(nil), // 15: userBehavior.GetUserFocusStatusResp
	(*GetProduceCountsReq)(nil),    // 16: userBehavior.GetProduceCountsReq
	(*GetProduceCountsData)(nil),   // 17: userBehavior.GetProduceCountsData
	(*GetProduceCountsResp)(nil),   // 18: userBehavior.GetProduceCountsResp
	(*AddFocusReq)(nil),            // 19: userBehavior.AddFocusReq
	(*AddFocusResp)(nil),           // 20: userBehavior.AddFocusResp
	(*AddPraiseReq)(nil),           // 21: userBehavior.AddPraiseReq
	(*AddPraiseResp)(nil),          // 22: userBehavior.AddPraiseResp
	(*AddFocusNumReq)(nil),         // 23: userBehavior.AddFocusNumReq
	(*AddFocusNumResp)(nil),        // 24: userBehavior.AddFocusNumResp
	(*AddCommentNumReq)(nil),       // 25: userBehavior.AddCommentNumReq
	(*AddCommentNumResp)(nil),      // 26: userBehavior.AddCommentNumResp
	(*AddPraiseNumReq)(nil),        // 27: userBehavior.AddPraiseNumReq
	(*AddPraiseNumResp)(nil),       // 28: userBehavior.AddPraiseNumResp
	(*AddFollowNumReq)(nil),        // 29: userBehavior.AddFollowNumReq
	(*AddFollowNumResp)(nil),       // 30: userBehavior.AddFollowNumResp
	(*AddShareNumReq)(nil),         // 31: userBehavior.AddShareNumReq
	(*AddShareNumResp)(nil),        // 32: userBehavior.AddShareNumResp
	(*DelFocusReq)(nil),            // 33: userBehavior.DelFocusReq
	(*DelFocusResp)(nil),           // 34: userBehavior.DelFocusResp
	(*DelPraiseReq)(nil),           // 35: userBehavior.DelPraiseReq
	(*DelPraiseResp)(nil),          // 36: userBehavior.DelPraiseResp
	(*AddCommentReq)(nil),          // 37: userBehavior.AddCommentReq
	(*AddCommentResp)(nil),         // 38: userBehavior.AddCommentResp
	(*GetCommentListReq)(nil),      // 39: userBehavior.GetCommentListReq
	(*CommentList)(nil),            // 40: userBehavior.CommentList
	(*GetCommentListResp)(nil),     // 41: userBehavior.GetCommentListResp
}
var file_rpcuserbehavior_proto_depIdxs = []int32{
	7,  // 0: userBehavior.GetFocusFollowListResp.list:type_name -> userBehavior.GetFocusFollowListData
	12, // 1: userBehavior.GetPraiseListResp.list:type_name -> userBehavior.GetPraiseListData
	17, // 2: userBehavior.GetProduceCountsResp.list:type_name -> userBehavior.GetProduceCountsData
	40, // 3: userBehavior.GetCommentListResp.list:type_name -> userBehavior.CommentList
	0,  // 4: userBehavior.RpcUserBehavior.CheckHealth:input_type -> userBehavior.CheckHealthRequest
	2,  // 5: userBehavior.RpcUserBehavior.GetUserCount:input_type -> userBehavior.GetUserCountReq
	4,  // 6: userBehavior.RpcUserBehavior.GetProduceCount:input_type -> userBehavior.GetProduceCountReq
	6,  // 7: userBehavior.RpcUserBehavior.GetFocusFollowList:input_type -> userBehavior.GetFocusFollowListReq
	9,  // 8: userBehavior.RpcUserBehavior.GetUserIsPraise:input_type -> userBehavior.GetUserIsPraiseReq
	11, // 9: userBehavior.RpcUserBehavior.GetPraiseList:input_type -> userBehavior.GetPraiseListReq
	14, // 10: userBehavior.RpcUserBehavior.GetUserFocusStatus:input_type -> userBehavior.GetUserFocusStatusReq
	16, // 11: userBehavior.RpcUserBehavior.GetProduceCounts:input_type -> userBehavior.GetProduceCountsReq
	19, // 12: userBehavior.RpcUserBehavior.AddFocus:input_type -> userBehavior.AddFocusReq
	21, // 13: userBehavior.RpcUserBehavior.AddPraise:input_type -> userBehavior.AddPraiseReq
	25, // 14: userBehavior.RpcUserBehavior.AddCommentNum:input_type -> userBehavior.AddCommentNumReq
	27, // 15: userBehavior.RpcUserBehavior.AddPraiseNum:input_type -> userBehavior.AddPraiseNumReq
	29, // 16: userBehavior.RpcUserBehavior.AddFollowNum:input_type -> userBehavior.AddFollowNumReq
	23, // 17: userBehavior.RpcUserBehavior.AddFocusNum:input_type -> userBehavior.AddFocusNumReq
	31, // 18: userBehavior.RpcUserBehavior.AddShareNum:input_type -> userBehavior.AddShareNumReq
	33, // 19: userBehavior.RpcUserBehavior.DelFocus:input_type -> userBehavior.DelFocusReq
	35, // 20: userBehavior.RpcUserBehavior.DelPraise:input_type -> userBehavior.DelPraiseReq
	37, // 21: userBehavior.RpcUserBehavior.AddComment:input_type -> userBehavior.AddCommentReq
	39, // 22: userBehavior.RpcUserBehavior.GetCommentList:input_type -> userBehavior.GetCommentListReq
	1,  // 23: userBehavior.RpcUserBehavior.CheckHealth:output_type -> userBehavior.CheckHealthReply
	3,  // 24: userBehavior.RpcUserBehavior.GetUserCount:output_type -> userBehavior.GetUserCountResp
	5,  // 25: userBehavior.RpcUserBehavior.GetProduceCount:output_type -> userBehavior.GetProduceCountResp
	8,  // 26: userBehavior.RpcUserBehavior.GetFocusFollowList:output_type -> userBehavior.GetFocusFollowListResp
	10, // 27: userBehavior.RpcUserBehavior.GetUserIsPraise:output_type -> userBehavior.GetUserIsPraiseResp
	13, // 28: userBehavior.RpcUserBehavior.GetPraiseList:output_type -> userBehavior.GetPraiseListResp
	15, // 29: userBehavior.RpcUserBehavior.GetUserFocusStatus:output_type -> userBehavior.GetUserFocusStatusResp
	18, // 30: userBehavior.RpcUserBehavior.GetProduceCounts:output_type -> userBehavior.GetProduceCountsResp
	20, // 31: userBehavior.RpcUserBehavior.AddFocus:output_type -> userBehavior.AddFocusResp
	22, // 32: userBehavior.RpcUserBehavior.AddPraise:output_type -> userBehavior.AddPraiseResp
	26, // 33: userBehavior.RpcUserBehavior.AddCommentNum:output_type -> userBehavior.AddCommentNumResp
	28, // 34: userBehavior.RpcUserBehavior.AddPraiseNum:output_type -> userBehavior.AddPraiseNumResp
	30, // 35: userBehavior.RpcUserBehavior.AddFollowNum:output_type -> userBehavior.AddFollowNumResp
	24, // 36: userBehavior.RpcUserBehavior.AddFocusNum:output_type -> userBehavior.AddFocusNumResp
	32, // 37: userBehavior.RpcUserBehavior.AddShareNum:output_type -> userBehavior.AddShareNumResp
	34, // 38: userBehavior.RpcUserBehavior.DelFocus:output_type -> userBehavior.DelFocusResp
	36, // 39: userBehavior.RpcUserBehavior.DelPraise:output_type -> userBehavior.DelPraiseResp
	38, // 40: userBehavior.RpcUserBehavior.AddComment:output_type -> userBehavior.AddCommentResp
	41, // 41: userBehavior.RpcUserBehavior.GetCommentList:output_type -> userBehavior.GetCommentListResp
	23, // [23:42] is the sub-list for method output_type
	4,  // [4:23] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_rpcuserbehavior_proto_init() }
func file_rpcuserbehavior_proto_init() {
	if File_rpcuserbehavior_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpcuserbehavior_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckHealthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProduceCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProduceCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFocusFollowListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFocusFollowListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFocusFollowListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIsPraiseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIsPraiseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPraiseListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPraiseListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPraiseListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFocusStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFocusStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProduceCountsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProduceCountsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProduceCountsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFocusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFocusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPraiseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPraiseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFocusNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFocusNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPraiseNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPraiseNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFollowNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFollowNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShareNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShareNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFocusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFocusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPraiseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPraiseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCommentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcuserbehavior_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpcuserbehavior_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpcuserbehavior_proto_goTypes,
		DependencyIndexes: file_rpcuserbehavior_proto_depIdxs,
		MessageInfos:      file_rpcuserbehavior_proto_msgTypes,
	}.Build()
	File_rpcuserbehavior_proto = out.File
	file_rpcuserbehavior_proto_rawDesc = nil
	file_rpcuserbehavior_proto_goTypes = nil
	file_rpcuserbehavior_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcUserBehaviorClient is the client API for RpcUserBehavior service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcUserBehaviorClient interface {
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthReply, error)
	//获取粉丝关注数量
	GetUserCount(ctx context.Context, in *GetUserCountReq, opts ...grpc.CallOption) (*GetUserCountResp, error)
	//获取作品点赞评论数量
	GetProduceCount(ctx context.Context, in *GetProduceCountReq, opts ...grpc.CallOption) (*GetProduceCountResp, error)
	//获取关注/粉丝列表
	GetFocusFollowList(ctx context.Context, in *GetFocusFollowListReq, opts ...grpc.CallOption) (*GetFocusFollowListResp, error)
	//获取用户是否点赞
	GetUserIsPraise(ctx context.Context, in *GetUserIsPraiseReq, opts ...grpc.CallOption) (*GetUserIsPraiseResp, error)
	//获取点赞列表
	GetPraiseList(ctx context.Context, in *GetPraiseListReq, opts ...grpc.CallOption) (*GetPraiseListResp, error)
	//获取用户关注状态
	GetUserFocusStatus(ctx context.Context, in *GetUserFocusStatusReq, opts ...grpc.CallOption) (*GetUserFocusStatusResp, error)
	//批量获取作品点赞评论数量
	GetProduceCounts(ctx context.Context, in *GetProduceCountsReq, opts ...grpc.CallOption) (*GetProduceCountsResp, error)
	//新增关注详情
	AddFocus(ctx context.Context, in *AddFocusReq, opts ...grpc.CallOption) (*AddFocusResp, error)
	//新增点赞详情
	AddPraise(ctx context.Context, in *AddPraiseReq, opts ...grpc.CallOption) (*AddPraiseResp, error)
	//新增评论计数
	AddCommentNum(ctx context.Context, in *AddCommentNumReq, opts ...grpc.CallOption) (*AddCommentNumResp, error)
	//新增点赞计数
	AddPraiseNum(ctx context.Context, in *AddPraiseNumReq, opts ...grpc.CallOption) (*AddPraiseNumResp, error)
	//新增粉丝计数
	AddFollowNum(ctx context.Context, in *AddFollowNumReq, opts ...grpc.CallOption) (*AddFollowNumResp, error)
	//新增关注计数
	AddFocusNum(ctx context.Context, in *AddFocusNumReq, opts ...grpc.CallOption) (*AddFocusNumResp, error)
	//新增fe计数
	AddShareNum(ctx context.Context, in *AddShareNumReq, opts ...grpc.CallOption) (*AddShareNumResp, error)
	//取消关注详情
	DelFocus(ctx context.Context, in *DelFocusReq, opts ...grpc.CallOption) (*DelFocusResp, error)
	//取消点赞详情
	DelPraise(ctx context.Context, in *DelPraiseReq, opts ...grpc.CallOption) (*DelPraiseResp, error)
	// 添加评论
	AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	// 获取评论列表
	GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListResp, error)
}

type rpcUserBehaviorClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcUserBehaviorClient(cc grpc.ClientConnInterface) RpcUserBehaviorClient {
	return &rpcUserBehaviorClient{cc}
}

func (c *rpcUserBehaviorClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthReply, error) {
	out := new(CheckHealthReply)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetUserCount(ctx context.Context, in *GetUserCountReq, opts ...grpc.CallOption) (*GetUserCountResp, error) {
	out := new(GetUserCountResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetProduceCount(ctx context.Context, in *GetProduceCountReq, opts ...grpc.CallOption) (*GetProduceCountResp, error) {
	out := new(GetProduceCountResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetProduceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetFocusFollowList(ctx context.Context, in *GetFocusFollowListReq, opts ...grpc.CallOption) (*GetFocusFollowListResp, error) {
	out := new(GetFocusFollowListResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetFocusFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetUserIsPraise(ctx context.Context, in *GetUserIsPraiseReq, opts ...grpc.CallOption) (*GetUserIsPraiseResp, error) {
	out := new(GetUserIsPraiseResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetUserIsPraise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetPraiseList(ctx context.Context, in *GetPraiseListReq, opts ...grpc.CallOption) (*GetPraiseListResp, error) {
	out := new(GetPraiseListResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetPraiseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetUserFocusStatus(ctx context.Context, in *GetUserFocusStatusReq, opts ...grpc.CallOption) (*GetUserFocusStatusResp, error) {
	out := new(GetUserFocusStatusResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetUserFocusStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetProduceCounts(ctx context.Context, in *GetProduceCountsReq, opts ...grpc.CallOption) (*GetProduceCountsResp, error) {
	out := new(GetProduceCountsResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetProduceCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddFocus(ctx context.Context, in *AddFocusReq, opts ...grpc.CallOption) (*AddFocusResp, error) {
	out := new(AddFocusResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddFocus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddPraise(ctx context.Context, in *AddPraiseReq, opts ...grpc.CallOption) (*AddPraiseResp, error) {
	out := new(AddPraiseResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddPraise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddCommentNum(ctx context.Context, in *AddCommentNumReq, opts ...grpc.CallOption) (*AddCommentNumResp, error) {
	out := new(AddCommentNumResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddCommentNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddPraiseNum(ctx context.Context, in *AddPraiseNumReq, opts ...grpc.CallOption) (*AddPraiseNumResp, error) {
	out := new(AddPraiseNumResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddPraiseNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddFollowNum(ctx context.Context, in *AddFollowNumReq, opts ...grpc.CallOption) (*AddFollowNumResp, error) {
	out := new(AddFollowNumResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddFollowNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddFocusNum(ctx context.Context, in *AddFocusNumReq, opts ...grpc.CallOption) (*AddFocusNumResp, error) {
	out := new(AddFocusNumResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddFocusNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddShareNum(ctx context.Context, in *AddShareNumReq, opts ...grpc.CallOption) (*AddShareNumResp, error) {
	out := new(AddShareNumResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddShareNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) DelFocus(ctx context.Context, in *DelFocusReq, opts ...grpc.CallOption) (*DelFocusResp, error) {
	out := new(DelFocusResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/DelFocus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) DelPraise(ctx context.Context, in *DelPraiseReq, opts ...grpc.CallOption) (*DelPraiseResp, error) {
	out := new(DelPraiseResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/DelPraise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserBehaviorClient) GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListResp, error) {
	out := new(GetCommentListResp)
	err := c.cc.Invoke(ctx, "/userBehavior.RpcUserBehavior/GetCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcUserBehaviorServer is the server API for RpcUserBehavior service.
type RpcUserBehaviorServer interface {
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthReply, error)
	//获取粉丝关注数量
	GetUserCount(context.Context, *GetUserCountReq) (*GetUserCountResp, error)
	//获取作品点赞评论数量
	GetProduceCount(context.Context, *GetProduceCountReq) (*GetProduceCountResp, error)
	//获取关注/粉丝列表
	GetFocusFollowList(context.Context, *GetFocusFollowListReq) (*GetFocusFollowListResp, error)
	//获取用户是否点赞
	GetUserIsPraise(context.Context, *GetUserIsPraiseReq) (*GetUserIsPraiseResp, error)
	//获取点赞列表
	GetPraiseList(context.Context, *GetPraiseListReq) (*GetPraiseListResp, error)
	//获取用户关注状态
	GetUserFocusStatus(context.Context, *GetUserFocusStatusReq) (*GetUserFocusStatusResp, error)
	//批量获取作品点赞评论数量
	GetProduceCounts(context.Context, *GetProduceCountsReq) (*GetProduceCountsResp, error)
	//新增关注详情
	AddFocus(context.Context, *AddFocusReq) (*AddFocusResp, error)
	//新增点赞详情
	AddPraise(context.Context, *AddPraiseReq) (*AddPraiseResp, error)
	//新增评论计数
	AddCommentNum(context.Context, *AddCommentNumReq) (*AddCommentNumResp, error)
	//新增点赞计数
	AddPraiseNum(context.Context, *AddPraiseNumReq) (*AddPraiseNumResp, error)
	//新增粉丝计数
	AddFollowNum(context.Context, *AddFollowNumReq) (*AddFollowNumResp, error)
	//新增关注计数
	AddFocusNum(context.Context, *AddFocusNumReq) (*AddFocusNumResp, error)
	//新增fe计数
	AddShareNum(context.Context, *AddShareNumReq) (*AddShareNumResp, error)
	//取消关注详情
	DelFocus(context.Context, *DelFocusReq) (*DelFocusResp, error)
	//取消点赞详情
	DelPraise(context.Context, *DelPraiseReq) (*DelPraiseResp, error)
	// 添加评论
	AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error)
	// 获取评论列表
	GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error)
}

// UnimplementedRpcUserBehaviorServer can be embedded to have forward compatible implementations.
type UnimplementedRpcUserBehaviorServer struct {
}

func (*UnimplementedRpcUserBehaviorServer) CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetUserCount(context.Context, *GetUserCountReq) (*GetUserCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCount not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetProduceCount(context.Context, *GetProduceCountReq) (*GetProduceCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduceCount not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetFocusFollowList(context.Context, *GetFocusFollowListReq) (*GetFocusFollowListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFocusFollowList not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetUserIsPraise(context.Context, *GetUserIsPraiseReq) (*GetUserIsPraiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIsPraise not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetPraiseList(context.Context, *GetPraiseListReq) (*GetPraiseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPraiseList not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetUserFocusStatus(context.Context, *GetUserFocusStatusReq) (*GetUserFocusStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFocusStatus not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetProduceCounts(context.Context, *GetProduceCountsReq) (*GetProduceCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduceCounts not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddFocus(context.Context, *AddFocusReq) (*AddFocusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFocus not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddPraise(context.Context, *AddPraiseReq) (*AddPraiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPraise not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddCommentNum(context.Context, *AddCommentNumReq) (*AddCommentNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentNum not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddPraiseNum(context.Context, *AddPraiseNumReq) (*AddPraiseNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPraiseNum not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddFollowNum(context.Context, *AddFollowNumReq) (*AddFollowNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollowNum not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddFocusNum(context.Context, *AddFocusNumReq) (*AddFocusNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFocusNum not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddShareNum(context.Context, *AddShareNumReq) (*AddShareNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShareNum not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) DelFocus(context.Context, *DelFocusReq) (*DelFocusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFocus not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) DelPraise(context.Context, *DelPraiseReq) (*DelPraiseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPraise not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (*UnimplementedRpcUserBehaviorServer) GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}

func RegisterRpcUserBehaviorServer(s *grpc.Server, srv RpcUserBehaviorServer) {
	s.RegisterService(&_RpcUserBehavior_serviceDesc, srv)
}

func _RpcUserBehavior_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetUserCount(ctx, req.(*GetUserCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetProduceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProduceCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetProduceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetProduceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetProduceCount(ctx, req.(*GetProduceCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetFocusFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFocusFollowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetFocusFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetFocusFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetFocusFollowList(ctx, req.(*GetFocusFollowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetUserIsPraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIsPraiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetUserIsPraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetUserIsPraise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetUserIsPraise(ctx, req.(*GetUserIsPraiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetPraiseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPraiseListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetPraiseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetPraiseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetPraiseList(ctx, req.(*GetPraiseListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetUserFocusStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFocusStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetUserFocusStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetUserFocusStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetUserFocusStatus(ctx, req.(*GetUserFocusStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetProduceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProduceCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetProduceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetProduceCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetProduceCounts(ctx, req.(*GetProduceCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddFocus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFocusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddFocus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddFocus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddFocus(ctx, req.(*AddFocusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddPraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPraiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddPraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddPraise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddPraise(ctx, req.(*AddPraiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddCommentNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddCommentNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddCommentNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddCommentNum(ctx, req.(*AddCommentNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddPraiseNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPraiseNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddPraiseNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddPraiseNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddPraiseNum(ctx, req.(*AddPraiseNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddFollowNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddFollowNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddFollowNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddFollowNum(ctx, req.(*AddFollowNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddFocusNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFocusNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddFocusNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddFocusNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddFocusNum(ctx, req.(*AddFocusNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddShareNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShareNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddShareNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddShareNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddShareNum(ctx, req.(*AddShareNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_DelFocus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFocusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).DelFocus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/DelFocus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).DelFocus(ctx, req.(*DelFocusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_DelPraise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPraiseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).DelPraise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/DelPraise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).DelPraise(ctx, req.(*DelPraiseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).AddComment(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserBehavior_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserBehaviorServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userBehavior.RpcUserBehavior/GetCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserBehaviorServer).GetCommentList(ctx, req.(*GetCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcUserBehavior_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userBehavior.RpcUserBehavior",
	HandlerType: (*RpcUserBehaviorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _RpcUserBehavior_CheckHealth_Handler,
		},
		{
			MethodName: "GetUserCount",
			Handler:    _RpcUserBehavior_GetUserCount_Handler,
		},
		{
			MethodName: "GetProduceCount",
			Handler:    _RpcUserBehavior_GetProduceCount_Handler,
		},
		{
			MethodName: "GetFocusFollowList",
			Handler:    _RpcUserBehavior_GetFocusFollowList_Handler,
		},
		{
			MethodName: "GetUserIsPraise",
			Handler:    _RpcUserBehavior_GetUserIsPraise_Handler,
		},
		{
			MethodName: "GetPraiseList",
			Handler:    _RpcUserBehavior_GetPraiseList_Handler,
		},
		{
			MethodName: "GetUserFocusStatus",
			Handler:    _RpcUserBehavior_GetUserFocusStatus_Handler,
		},
		{
			MethodName: "GetProduceCounts",
			Handler:    _RpcUserBehavior_GetProduceCounts_Handler,
		},
		{
			MethodName: "AddFocus",
			Handler:    _RpcUserBehavior_AddFocus_Handler,
		},
		{
			MethodName: "AddPraise",
			Handler:    _RpcUserBehavior_AddPraise_Handler,
		},
		{
			MethodName: "AddCommentNum",
			Handler:    _RpcUserBehavior_AddCommentNum_Handler,
		},
		{
			MethodName: "AddPraiseNum",
			Handler:    _RpcUserBehavior_AddPraiseNum_Handler,
		},
		{
			MethodName: "AddFollowNum",
			Handler:    _RpcUserBehavior_AddFollowNum_Handler,
		},
		{
			MethodName: "AddFocusNum",
			Handler:    _RpcUserBehavior_AddFocusNum_Handler,
		},
		{
			MethodName: "AddShareNum",
			Handler:    _RpcUserBehavior_AddShareNum_Handler,
		},
		{
			MethodName: "DelFocus",
			Handler:    _RpcUserBehavior_DelFocus_Handler,
		},
		{
			MethodName: "DelPraise",
			Handler:    _RpcUserBehavior_DelPraise_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _RpcUserBehavior_AddComment_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _RpcUserBehavior_GetCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcuserbehavior.proto",
}
